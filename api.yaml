swagger: "2.0"

info:
  version: "0.1"
  title: PiggyBank API
  description: Be aware that numbers in given JSON must not begin with a "0" to be correctly treated and only the present fields will be updated in given JSON with a PATCH request

basePath: /api
schemes: [http]
consumes:
  - application/json
produces:
  - application/json

paths:
  /register:
    post:
      summary: Register a new PiggyBank user
      parameters:
        - name: User
          in: body
          description: The piggybank user to be created
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: Successful
          headers:
            Authorization:
              description: The api_key token
              type: string
        400:
          description: Field missing or invalid email
        409:
          description: Error email already exist
  /auth:
    post:
      summary: Logs an user in
      parameters:
        - name: Credentials
          in: body
          description: The credentials of the user
          required: true
          schema:
            $ref: "#/definitions/Credentials"
      responses:
        200:
          description: Successful
          headers:
            Authorization:
              description: The api_key token
              type: string
        400:
          description: Field missing
        401:
          description: Authentication failed
  /user:
    get:
      summary: Get authenticated user details
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/UserPublic"
        401:
          description: wrong JWT
      security:
        - api_key: []
    patch:
      summary: Update authenticated user details
      parameters:
        - name: UserPatch
          in: body
          description: The user edited values. If the email is updated, we receive a new token for authentication
          required: true
          schema:
            $ref: "#/definitions/UserPatch"
      responses:
        200:
          description: OK
          headers:
            Authorization:
              description: The new api_key token if the email was changed
              type: string
        400:
          description: Invalid email (if modified)
        401:
          description: wrong JWT
        409:
          description: Error new email already exist
      security:
        - api_key: []
    delete:
      summary: Remove authenticated user
      responses:
        200:
          description: OK
        401:
          description: wrong JWT
      security:
        - api_key: []
  /transactions:
    get:
      summary: Get all transactions of the authenticated user
      parameters:
        - name: Date
          in: body
          required: true
          schema:
            properties:
              from:
                $ref: "#/definitions/Date"
              to:
                $ref: "#/definitions/Date"
      responses:
        200:
          description: OK
        400:
          description: Invalid fields from and to
          schema:
            type: array
            items:
              $ref: "#/definitions/TransactionWithId"
      security:
        - api_key: []
    post:
      summary: Create a new transaction
      parameters:
        - name: Transaction
          in: body
          description: The info of the transaction
          required: true
          schema:
            $ref: "#/definitions/TransactionPost"
      responses:
        201:
          description: Successful
        400:
          description: Field missing or problem with the specified budget
        404:
          description: BudgetId not found
      security:
        - api_key: []
  /transactions/{id}:
    parameters:
      - name: id
        in: path
        required: true
        type: number
    get:
      summary: Retrieve the transaction from the ID
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Transaction"
        404:
          description: Error transaction not found
      security:
        - api_key: []
    patch:
      summary: Update transaction details
      parameters:
        - name: TransactionPatch
          in: body
          description: The transaction edited values with the ID
          required: true
          schema:
            $ref: "#/definitions/TransactionPatch"
      responses:
        200:
          description: OK
        400:
          description: Problem with the new specified budget
        404:
          description: Error transaction not found
      security:
        - api_key: []
    delete:
      summary: Remove the transaction with the ID
      responses:
        200:
          description: OK
        404:
          description: Error transaction not found
      security:
        - api_key: []
  /exchanges:
    get:
      summary: Get all exchanges of the authenticated user
      parameters:
        - name: Date
          in: body
          required: true
          schema:
            properties:
              from:
                $ref: "#/definitions/Date"
              to:
                $ref: "#/definitions/Date"
      responses:
        200:
          description: OK
        400:
          description: Problem with the fields from and to
          schema:
            type: array
            items:
              $ref: "#/definitions/ExchangeWithId"
      security:
        - api_key: []
    post:
      summary: Create a new exchange
      parameters:
        - name: Exchange
          in: body
          description: The info of the exchange
          required: true
          schema:
            $ref: "#/definitions/Exchange"
      responses:
        201:
          description: Successful
        400:
          description: Field missing
      security:
        - api_key: []
  /exchanges/{id}:
    parameters:
      - name: id
        in: path
        required: true
        type: number
    get:
      summary: Retrieve the exchange from the ID
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Exchange"
        404:
          description: Error exchange not found
      security:
        - api_key: []
    patch:
      summary: Update exchange details
      parameters:
        - name: ExchangePatch
          in: body
          description: The exchange edited values with the ID
          required: true
          schema:
            $ref: "#/definitions/ExchangePatch"
      responses:
        200:
          description: OK
        404:
          description: Error exchange not found
      security:
        - api_key: []
    delete:
      summary: Remove the exchange with the ID
      responses:
        200:
          description: OK
        404:
          description: Error exchange not found
      security:
        - api_key: []
  /budgets:
    get:
      summary: Get all authenticated user budgets preview
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/BudgetWithId"
      security:
        - api_key: []
    post:
      summary: Create a new budget
      parameters:
        - name: Budget
          in: body
          description: The user edited values
          required: true
          schema:
            $ref: "#/definitions/Budget"
      responses:
        201:
          description: Successful
        400:
          description: Field missing or error with the creation
      security:
        - api_key: []
  /budgets/{id}:
    parameters:
      - name: id
        in: path
        required: true
        type: number
    get:
      summary: Retrieve the budget from the ID
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Budget"
        404:
          description: Budget with specified ID not found
      security:
        - api_key: []
    patch:
      summary: Patch the specified budget
      parameters:
        - name: Budget
          in: body
          description: The user edited values
          required: true
          schema:
            $ref: "#/definitions/BudgetPatch"
      responses:
        200:
          description: OK
        404:
          description: Error budget not found
      security:
        - api_key: []
    delete:
      summary: Delete the specified budget
      responses:
        200:
          description: OK
        404:
          description: Error budget not found
      security:
        - api_key: []
  /dashboard/spendings:
    get:
      summary: Get all outcoming budgets day by day for the authenticated user
      parameters:
        - name: Date
          in: body
          required: true
          schema:
            properties:
              from:
                $ref: "#/definitions/Date"
              to:
                $ref: "#/definitions/Date"
      responses:
        200:
          description: OK
        400:
          description: Invalid fields from and to
          schema:
            type: array
            items:
              $ref: "#/definitions/Spending"
      security:
        - api_key: []
  /dashboard/usage:
    get:
      summary: Get all outcoming and incomming usage day by day for the authenticated user
      parameters:
        - name: Date
          in: body
          required: true
          schema:
            properties:
              from:
                $ref: "#/definitions/Date"
              to:
                $ref: "#/definitions/Date"
      responses:
        200:
          description: OK
        400:
          description: Invalid fields from and to
          schema:
            type: array
            items:
              $ref: "#/definitions/Usage"
      security:
        - api_key: []

definitions:
  User:
    description: A PiggyBank user
    properties:
      email:
        type: string
      fullname:
        type: string
      password:
        type: string
      currency:
        type: string
    required:
      - email
      - fullname
      - password
      - currency
  UserPublic:
    description: Public info of a PyggyBank user
    properties:
      email:
        type: string
      fullname:
        type: string
      currency:
        type: string
    required:
      - email
      - fullname
      - currency
  UserPatch:
    description: The user edited values
    properties:
      email:
        type: string
      fullname:
        type: string
      password:
        type: string
      currency:
        type: string
  Credentials:
    description: A PiggyBank user credentials
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
  Transaction:
    description: Transaction of a PiggyBank user
    properties:
      name:
        type: string
      date:
        $ref: "#/definitions/Date"
      budget:
        $ref: "#/definitions/TransactionBudget"
      amount:
        type: number
    required:
      - name
      - amount
  TransactionWithId:
    description: Transaction of a PiggyBank user with ID
    properties:
      id:
        type: number
      name:
        type: string
      date:
        $ref: "#/definitions/Date"
      budget:
        $ref: "#/definitions/TransactionBudget"
      amount:
        type: number
    required:
      - id
      - name
      - amount
  TransactionPost:
    description: The new transaction values
    properties:
      name:
        type: string
      date:
        $ref: "#/definitions/Date"
      budgetId:
        type: number
      amount:
        type: number
    required:
      - name
      - budgetId
      - amount
  Date:
    description: Date of a edited transaction values
    properties:
      day:
        type: number
      month:
        type: number
      year:
        type: number
    required:
      - day
      - month
      - year
  TransactionBudget:
    description: Budget of a transaction
    properties:
      id:
        type: number
      name:
        type: string
    required:
      - id
      - name
  TransactionPatch:
    description: The transaction edited values
    properties:
      name:
        type: string
      date:
        $ref: "#/definitions/Date"
      budgetId:
        type: number
      amount:
        type: number
  Exchange:
    description: The exchange of a PiggyBank user
    properties:
      name:
        type: string
      date:
        $ref: "#/definitions/Date"
      type:
        type: string
      amount:
        type: number
    required:
      - name
      - type
      - amount
  ExchangeWithId:
    description: The exchange of a PiggyBank user with ID
    properties:
      id:
        type: number
      name:
        type: string
      date:
        $ref: "#/definitions/Date"
      type:
        type: string
      amount:
        type: number
    required:
      - id
      - name
      - type
      - amount
  ExchangePatch:
    description: The exchange edited values
    properties:
      name:
        type: string
      date:
        $ref: "#/definitions/Date"
      type:
        type: string
      amount:
        type: number
  BudgetWithId:
    description: A budget
    properties:
      id:
        type: number
      name:
        type: string
      type:
        type: string
      used:
        type: number
      left:
        type: number
      exceeding:
        type: number
      persistent:
        type: number
      reported:
        type: boolean
      color:
        type: string
      takesFrom:
        type: array
        items:
          type: object
          properties:
            order:
              type: number
            budgetId:
              type: number
          required:
            - order
            - budgetId
    required:
      - id
      - name
      - type
      - used
      - left
      - exceeding
      - persistent
      - reported
      - color
  Budget:
    description: A budget
    properties:
      name:
        type: string
      type:
        type: string
      used:
        type: number
      left:
        type: number
      exceeding:
        type: number
      persistent:
        type: number
      reported:
        type: boolean
      color:
        type: string
      takesFrom:
        type: array
        items:
          type: object
          properties:
            order:
              type: number
            budgetId:
              type: number
          required:
            - order
            - budgetId
    required:
      - name
      - type
      - used
      - left
      - exceeding
      - persistent
      - reported
      - color
      - takesFrom
  BudgetPatch:
    description: A budget
    properties:
      name:
        type: string
      used:
        type: number
      left:
        type: number
      exceeding:
        type: number
      persistent:
        type: number
      reported:
        type: boolean
      color:
        type: string
  Spending:
    description: Outcoming budget spending amount for a specific date
    properties:
      date:
        $ref: "#/definitions/Date"
      budget:
        type: string
      amount:
        type: number
      color:
        type: string
    required:
      - date
      - budget
      - amount
      - color
  Usage:
    description: Total budget used and total budget left for a specific date
    properties:
      date:
        $ref: "#/definitions/Date"
      used:
        type: number
      left:
        type: number
    required:
      - date
      - used
      - left

securityDefinitions:
  api_key:
    type: apiKey
    name: Autorization
    in: header
